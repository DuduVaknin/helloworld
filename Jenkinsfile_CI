//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//                                                                  //
// author: David Vaknin                                             //
// last updated: 08/08/19                                           //
// email: david@vaknin.io                                           //  
//                                                                  //
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

node('master') {
    // clean work-space
    cleanWs deleteDirs: true

    //get tinestamp
    def now = new Date()
    env.TIME=now.format("yyyyMMdd-HH:mm:ss.SSS", TimeZone.getTimeZone('UTC'))
    
    def app

    stage('Clone repository') {
        /* repository will clone to our workspace */
        checkout([$class: 'GitSCM', branches: [[name: 'master']],
        doGenerateSubmoduleConfigurations: false,
        extensions: [],
        submoduleCfg: [],
        userRemoteConfigs: [[credentialsId: 'duduvaknin', url: 'https://github.com/DuduVaknin/helloworld.git']]])
    }// end of stage Clone repository

    runCommand('ls')
    stage('Build image') {
        /* This builds the actual image; duduvaknin/vcita_helloworld:latest
         * docker build on the command line */
        app = docker.build("duduvaknin/vcita_helloworld")
    }// end of stage Build image

    stage('Push image') {
        /* Push the image to Docker hub with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag. */
        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }
    }// end of stage Push image
    // mail will sent with buildlog and status
    emailExt()
}// end of node master

//this method run shell command
def runCommand( command ) {
    ansiColor('xterm') {
        if(isUnix()) {
            sh command
        } else {
            bat command
        }
    }
}

//this method send email with build result
def emailExt () {
     emailext (body: '''${SCRIPT, template="buildlog.template"}''',
        mimeType: 'text/html',
        subject: "[Jenkins] - Build ${currentBuild.currentResult}",
        to: "${MailRecipients}",
        replyTo: "${MailRecipients}",
        recipientProviders: [[$class: 'CulpritsRecipientProvider']])

 } 
