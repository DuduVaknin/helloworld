//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//                                                                  //
// author: David Vaknin                                             //
// last updated: 08/08/19                                           //
// email: david@vaknin.io                                           //  
//                                                                  //
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

node('master') {

    // clean work-space
    cleanWs deleteDirs: true

    //get tinestamp
    def now = new Date()
    env.TIME=now.format("yyyyMMdd-HH:mm:ss.SSS", TimeZone.getTimeZone('UTC'))
    
    def app
    stage('Clone repository') {
        /* repository will clone to our workspace */
        checkout([$class: 'GitSCM', branches: [[name: 'master']],
        doGenerateSubmoduleConfigurations: false,
        extensions: [],
        submoduleCfg: [],
        userRemoteConfigs: [[credentialsId: 'duduvaknin', url: 'https://github.com/DuduVaknin/helloworld.git']]])
    }// end of stage Clone repository

    runCommand('ls')
    stage('Deploy on K8s'){
        runCommand("kubectl apply -f deployment/deployment.yml")
    }// end of stage Deploy on K8s


//     ----
//  stage('Deploy on K8s'){    
//     kubernetesDeploy(kubeconfigId: 'kubeconfig-credentials-id',               // REQUIRED

//         configs: '<ant-glob-pattern-for-resource-config-paths>', // REQUIRED
//         enableConfigSubstitution: false,

//         secretNamespace: '<secret-namespace>',
//         secretName: '<secret-name>',
//         dockerCredentials: [
//             [credentialsId: '<credentials-id-for-docker-hub>'],
//             [credentialsId: '<credentials-id-for-other-private-registry>', url: '<registry-url>'],
//         ]
//     )
//  }

//     ----

}// end of node master

//this method run shell command
def runCommand( command ) {
    ansiColor('xterm') {
        if(isUnix()) {
            sh command
        } else {
            bat command
        }
    }
}

//this method send email with build result
def emailExt (result, zipToEmail) {
     emailext (body: '''${SCRIPT, template="buildlog.template"}''',
        mimeType: 'text/html',
        subject: "[Jenkins] - Build "+ result,
        attachmentsPattern: zipToEmail,
        to: params.MailRecipients,
        replyTo: params.MailRecipients,
        recipientProviders: [[$class: 'CulpritsRecipientProvider']])

} 